version: "3.8"
services:
  web:
    build:
      args:
        user: laravel
        uid: 1000
      context: ./
      dockerfile: deployment/web-dev.dockerfile
    image: ${REGISTRY_USER}/${APP_NAME}/web:${APP_VERSION}
    container_name: ${APP_NAME}-web
    restart: unless-stopped
    environment:
      ENVIRONMENT: ${ENVIRONMENT}
      APP_NAME: ${APP_NAME}
      APP_KEY: ${APP_KEY}
      DB_DATABASE: ${DB_DATABASE}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_USERNAME: ${DB_USERNAME}
      DB_CONNECTION: mysql
      DB_HOST: db
      DB_PORT: 3306
    ports:
      - "9000:9000"
    volumes:
      - ./data/storage/app:/app/storage/app
      - ./.env:/app/.env:ro
      #- ./data/storage/logs:/app/storage/logs
    depends_on:
      - db
  photo-storage:
    image: minio/minio:latest
    container_name: ${AWS_BUCKET}.litterapp-storage
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_DEFAULT_BUCKET: ${AWS_BUCKET}
    ports:
        - 9600:9600
        - 9090:9090
    volumes:
        - ./data/minio:/data
    command: server --console-address ":9600" --address ":9090" /data
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:${FORWARD_MINIO_PORT}/minio/health/live"]
    #   retries: 3
    #   timeout: 5s
# Create a service that only creates a default bucket.
  # photo-storage-init:
  #   image: minio/mc
  #   depends_on:
  #     - photo-storage
  #   entrypoint: >
  #     /bin/sh -c "
  #     /usr/bin/mc config host add myminio http://localhost:${FORWARD_MINIO_PORT:-9090} ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
  #     /usr/bin/mc rm -r --force myminio/${AWS_BUCKET:-storage-local};
  #     /usr/bin/mc mb myminio/${AWS_BUCKET:-storage-local};
  #     /usr/bin/mc policy set download myminio/${AWS_BUCKET:-storage-local};
  #     exit 0;
  #     "
  docs:
    # build:
    #   context: ./docs
    #   dockerfile: deployment/docs.dockerfile
   image: ${REGISTRY_USER}/${APP_NAME}/docs:${APP_VERSION}
   container_name: ${APP_NAME}-docs
   restart: unless-stopped
   environment:
     - ENVIRONMENT
  db:
    image: mysql:8.0
    container_name: ${APP_NAME}-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    # ports:
    #   - 3306:3306
    volumes:
      - ./data/mysql/db:/var/lib/mysql
  # db-init:
  #   image: ${REGISTRY_USER}/${APP_NAME}-web:${APP_VERSION}
  #   container_name: ${APP_NAME}-db-init
  #   depends_on:
  #     - db
  #  command: ["php artisan migrate"]
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    environment:
      PMA_ARBITRARY: 1
    ports:
      - "8087:80"
    restart: unless-stopped
  nginx:
    image: nginx:stable-alpine-slim
    container_name: ${APP_NAME}-proxy
    restart: unless-stopped
    ports:
      #- 8080:80
      - 80:80
      - 443:443
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./cert:/etc/nginx/cert
    depends_on:
      - web
  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    restart: unless-stopped
    environment:
     - GF_SERVER_ROOT_URL=http://localhost/grafana #future usage
     - GF_INSTALL_PLUGINS=grafana-clock-panel
    ports:
     - 3000:3000
    volumes:
      - ./data/grafana:/var/lib/grafana:rw
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    restart: unless-stopped
    ports:
      - 3001:3001
    volumes:
      - ./data/uptime-kuma:/app/data

networks:
  network:
    name: ${ENVIRONMENT}
    driver: bridge
